package rgt.views;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.Highlight;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

import org.apache.commons.collections4.CollectionUtils;

import rgt.constants.RGTButtons;
import rgt.constants.RGTConstants;
import rgt.controllers.AutoHighlightController;
import rgt.controllers.EditController;
import rgt.controllers.IdentifyController;
import rgt.data.BusinessProcessData;
import rgt.data.StepData;
import rgt.interfaces.ReadInterface;
import rgt.strategies.DocRead;
import rgt.strategies.DocxRead;
import rgt.strategies.TxtRead;
import rgt.views.dialog.AddDialog;
import rgt.views.dialog.DeleteDialog;
import rgt.views.dialog.TitleboxDialog;
import rgt.views.dialog.UpdateDialog;

public class RToolView extends JFrame implements ActionListener {

	private static final long serialVersionUID = 1L;
	private String SPACE = " ";
	private String NEW_LINE = "\n";
	public RToolView() {
		initComponents();

		jTextArea1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent e) {
				if (jTextArea1.getSelectedText() != null) {
					String s = jTextArea1.getSelectedText();
					Highlighter highlighter = jTextArea1.getHighlighter();
					HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.yellow);
					// open the pop up
					JPanel panel = new JPanel();
					String[] options = { "Verb", "Noun", "Verb-Noun" };
					String result = RGTConstants.EMPTY;
					result = (String) JOptionPane.showInputDialog(panel, "Please make a selection:", "Grammer",
							JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

					switch (result == null ? RGTConstants.EMPTY : result) {
					case "Verb":
						verbFlag = true;
						verb = s;
						if (nounFlag == false) {
							JOptionPane.showMessageDialog(null, "Please select Noun only in next selection. ",
									RGTConstants.INFORMATION_TITLE, JOptionPane.INFORMATION_MESSAGE, null);
						}
						break;
					case "Noun":
						nounFlag = true;
						noun = s;
						if (verbFlag == false) {
							JOptionPane.showMessageDialog(null, "Please select Verb only in next selection. ",
									RGTConstants.INFORMATION_TITLE, JOptionPane.INFORMATION_MESSAGE, null);
						}
						break;
					case "Verb-Noun":
						verbFlag = true;
						nounFlag = true;
						verbNounFlag = true;
						JOptionPane.showMessageDialog(null, "You selected a Verb-Noun Phrase",
								RGTConstants.INFORMATION_TITLE, JOptionPane.INFORMATION_MESSAGE, null);
						break;
					default:
						break;
					}

					if (verbFlag == true && nounFlag == true) {
						if (verbNounFlag == true) {
							verbNoun = s;
						} else {
							verbNoun = verb + " " + noun;
						}

						AddDialog addDialog = new AddDialog(RToolView.this, verbNoun);
						addDialog.setTitle(RGTConstants.ADD_DIALOG_BOX_TITLE);
						addDialog.setSize(RGTConstants.DIALOG_WIDTH, RGTConstants.DIALOG_HEIGHT);
						addDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
						Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
						addDialog.setLocation(dimension.width / 2 - addDialog.getSize().width / 2,
								dimension.height / 2 - addDialog.getSize().height / 2);
						addDialog.setVisible(true);
						verbFlag = false;
						nounFlag = false;
						verbNounFlag = false;
					}

					try {
						highlighter.addHighlight(jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd(), painter);
					} catch (BadLocationException ex) {
						Logger.getLogger(rgt.views.RToolView.class.getName()).log(Level.SEVERE, null, ex);
					}

				}
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new JPanel();
		jScrollPane1 = new JScrollPane();
		jTextArea1 = new JTextArea();
		jLabel1 = new JLabel();
		jPanel2 = new JPanel();
		jScrollPane2 = new JScrollPane();
//		jTextArea2 = new JTextArea();
		jTree = new JTree(new DefaultMutableTreeNode(""));
		jButton1 = new javax.swing.JButton();
                btnAutoHighlight = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenuItem3 = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem4 = new javax.swing.JMenuItem();
		jMenu3 = new javax.swing.JMenu();
		jMenu6 = new javax.swing.JMenu();
		jMenu7 = new javax.swing.JMenu();
		jMenu8 = new javax.swing.JMenu();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle(RGTConstants.TITLE);

		jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		f = new Font("Calibri", Font.PLAIN, 15);
		jTextArea1.setFont(f);
		jTextArea1.setLineWrap(true);
		jTextArea1.setWrapStyleWord(true);
		jScrollPane1.setViewportView(jTextArea1);

		jLabel1.setText("Input :");
		
		JButton btnAutoHighlight = new JButton("Auto Highlight");
		
		txtNoun = new JTextField();
		txtNoun.setEnabled(false);
		txtNoun.setEditable(false);
		txtNoun.setText("Noun");
		txtNoun.setBackground(Color.CYAN);
		txtNoun.setColumns(10);
		
		txtVerb = new JTextField();
		txtVerb.setForeground(Color.BLACK);
		txtVerb.setEnabled(false);
		txtVerb.setEditable(false);
		txtVerb.setBackground(Color.GREEN);
		txtVerb.setText("Verb");
		txtVerb.setColumns(10);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1Layout.setHorizontalGroup(
			jPanel1Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(jPanel1Layout.createSequentialGroup()
							.addComponent(jLabel1)
							.addPreferredGap(ComponentPlacement.RELATED, 392, Short.MAX_VALUE)
							.addComponent(txtVerb, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(txtNoun, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnAutoHighlight))
						.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 682, GroupLayout.PREFERRED_SIZE))
					.addContainerGap())
		);
		jPanel1Layout.setVerticalGroup(
			jPanel1Layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(jPanel1Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnAutoHighlight)
						.addComponent(jLabel1)
						.addComponent(txtNoun, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(txtVerb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 268, GroupLayout.PREFERRED_SIZE)
					.addContainerGap())
		);
		jPanel1.setLayout(jPanel1Layout);

		jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

//		jTextArea2.setColumns(20);
//		jTextArea2.setRows(5);
//		jTextArea2.setFont(f);
//		jTextArea2.setLineWrap(true);
//		jTextArea2.setWrapStyleWord(true);
//		jTree.setRootVisible(false);
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree.getCellRenderer();
        renderer.setLeafIcon(null);
        renderer.setClosedIcon(null);
        renderer.setOpenIcon(null);
		jScrollPane2.setViewportView(jTree);

		jButton1.setText(RGTButtons.GENERATE.getButton());
		jButton1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
                            boolean isError = validateBusinessProcesses();
                            if(!isError) {
                                TitleboxDialog title = new TitleboxDialog(RToolView.this);
                            title.setTitle(RGTConstants.ADD_DIALOG_BOX_TITLE);
				//title.setSize(RGTConstants.DIALOG_WIDTH, RGTConstants.DIALOG_HEIGHT);
				title.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
				title.setLocation(dimension.width / 2 - title.getSize().width / 2,
						dimension.height / 2 - title.getSize().height / 2);
				title.setVisible(true);
                            }
                            

			}
			
			private boolean validateBusinessProcesses() {
				EditController editCtrl = new EditController();
				boolean isError = false;
				for (BusinessProcessData businessProcess : editCtrl.getAllBusinessProcesses()) {
					List<StepData> steps = editCtrl.getAllSteps(businessProcess.getBusinessProcessId());
					if(CollectionUtils.isEmpty(steps)) {
						JOptionPane.showMessageDialog(null, RGTConstants.VALIDATION_MESSAGE_BP_WITHOUT_STEPS,
								RGTConstants.ERROR_TITLE, JOptionPane.ERROR_MESSAGE, null);
						isError = true;
						break;
					}
				}
				return isError;
			}
		});
                btnAutoHighlight.setText(RGTButtons.AUTO_HIGHLIGHT.getButton());
                btnAutoHighlight.addActionListener(new ActionListener() {

        			@Override
        			public void actionPerformed(ActionEvent e) {
        				String str = jTextArea1.getText();

        				AutoHighlightController ctrl = new AutoHighlightController(str);
        				ctrl.tagInput();

        				highlightPartsOfSpeech(ctrl.getNouns(), "noun");
        				highlightPartsOfSpeech(ctrl.getVerbs(), "verb");
        			}

        			public void highlightPartsOfSpeech(List<String> list, String partOfSpeech) {
        				Highlighter highlighter = jTextArea1.getHighlighter();
        				HighlightPainter painter = null;
        				if(partOfSpeech.equalsIgnoreCase("noun")) {
        					painter = new DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
        				}
        				else if(partOfSpeech.equalsIgnoreCase("verb")){
           					painter = new DefaultHighlighter.DefaultHighlightPainter(Color.green);
        				}
        				int startIndex = 0;
        				int endIndexSpace = 0;
        				int endIndexNewLine = 0;
        				int endIndex = 0;
        				int previousIndex = 0;
        				try {
        					for(String noun: list) {
        						startIndex = jTextArea1.getText().indexOf(noun, previousIndex);
        						endIndexSpace = jTextArea1.getText().indexOf(SPACE, startIndex) != -1 ? jTextArea1.getText().indexOf(SPACE, startIndex) : Integer.MAX_VALUE;
        						endIndexNewLine = jTextArea1.getText().indexOf(NEW_LINE, startIndex) != -1 ? jTextArea1.getText().indexOf(NEW_LINE, startIndex) : Integer.MAX_VALUE;
        						if(endIndexSpace < endIndexNewLine) {
        							endIndex = endIndexSpace;
        						}
        						else {
        							endIndex = endIndexNewLine;
        						}
        						previousIndex = endIndex;
        						highlighter.addHighlight(startIndex, endIndex, painter);
        					}
        				} catch (BadLocationException ex) {
        					Logger.getLogger(rgt.views.RToolView.class.getName()).log(Level.SEVERE, null, ex);
        				}
        			}
        		});
		jLabel2.setText("Output Pane :");

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2Layout.setHorizontalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
					.addContainerGap(303, Short.MAX_VALUE)
					.addComponent(jButton1)
					.addGap(299))
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 682, GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabel2))
					.addContainerGap(13, Short.MAX_VALUE))
		);
		jPanel2Layout.setVerticalGroup(
			jPanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(jLabel2)
					.addGap(12)
					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(jButton1)
					.addContainerGap())
		);
		jPanel2.setLayout(jPanel2Layout);

		jMenu1.setText("File");

		jMenuItem1.setText("New");

		jMenu1.add(jMenuItem1);

		jMenuItem2.setText("Open");
		jMenu1.add(jMenuItem2);

		jMenuItem3.setText("Exit");
		jMenu1.add(jMenuItem3);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");

		JMenuItem addMenuItem = new JMenuItem("Add");
		jMenu2.add(addMenuItem);

		addMenuItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				AddDialog addDialog = new AddDialog(RToolView.this, RGTConstants.EMPTY);
				addDialog.setTitle(RGTConstants.ADD_DIALOG_BOX_TITLE);
				addDialog.setSize(RGTConstants.DIALOG_WIDTH, RGTConstants.DIALOG_HEIGHT);
				addDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
				addDialog.setLocation(dimension.width / 2 - addDialog.getSize().width / 2,
						dimension.height / 2 - addDialog.getSize().height / 2);
				addDialog.setVisible(true);
			}
		});

		deleteMenuItem = new JMenuItem("Delete");
		jMenu2.add(deleteMenuItem);

		deleteMenuItem.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				DeleteDialog deleteDialog = new DeleteDialog(RToolView.this);
				deleteDialog.setTitle(RGTConstants.DELETE_DIALOG_BOX_TITLE);
				deleteDialog.setSize(RGTConstants.DIALOG_WIDTH, RGTConstants.DIALOG_HEIGHT);
				deleteDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
				deleteDialog.setLocation(dimension.width / 2 - deleteDialog.getSize().width / 2,
						dimension.height / 2 - deleteDialog.getSize().height / 2);
				deleteDialog.setVisible(true);

			}

		});

		jMenuItem4.setText("Update");
		jMenu2.add(jMenuItem4);

		jMenuItem4.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				UpdateDialog updateDialog = new UpdateDialog(RToolView.this);
				updateDialog.setTitle(RGTConstants.UPDATE_DIALOG_BOX_TITLE);
				updateDialog.setSize(RGTConstants.DIALOG_WIDTH, RGTConstants.DIALOG_HEIGHT);
				updateDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
				Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
				updateDialog.setLocation(dimension.width / 2 - updateDialog.getSize().width / 2,
						dimension.height / 2 - updateDialog.getSize().height / 2);
				updateDialog.setVisible(true);
			}
		});

		jMenuBar1.add(jMenu2);

		jMenu3.setText("Format");

		jMenu6.setText("Font");
		jMenu3.add(jMenu6);

		jMenu7.setText("Font Size");
		jMenu3.add(jMenu7);

		jMenu8.setText("Font Style");
		jMenu3.add(jMenu8);

		jMenu6.add(fname1 = new JMenuItem("Arial"));
		jMenu6.add(fname2 = new JMenuItem("Comic Sans MS"));
		jMenu6.add(fname3 = new JMenuItem("Times New Roman"));

		jMenu8.add(fstyle1 = new JMenuItem("Regular"));
		jMenu8.add(fstyle2 = new JMenuItem("Bold"));

		jMenu7.add(fsize1 = new JMenuItem("12"));
		jMenu7.add(fsize2 = new JMenuItem("14"));
		jMenu7.add(fsize3 = new JMenuItem("18"));
		jMenu7.add(fsize4 = new JMenuItem("20"));

		jMenuBar1.add(jMenu3);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
						.addComponent(jPanel1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jPanel2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
					.addContainerGap(108, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		getContentPane().setLayout(layout);
		jMenuItem1.addActionListener(this);
		jMenuItem2.addActionListener(this);
		jMenuItem3.addActionListener(this);
		fname1.addActionListener(this);
		fname2.addActionListener(this);
		fname3.addActionListener(this);
		fstyle1.addActionListener(this);
		fstyle2.addActionListener(this);
		fsize1.addActionListener(this);
		fsize2.addActionListener(this);
		fsize3.addActionListener(this);
		fsize4.addActionListener(this);

		pack();
	} // </editor-fold>//GEN-END:initComponents

	public void actionPerformed(ActionEvent evt) {
		command = (String) evt.getActionCommand();
		if (command.equals("New")) {
			jTextArea1.setText("");
//			jTextArea2.setText("");
			IdentifyController clearall = new IdentifyController();
			clearall.clear();
			
			DefaultTreeModel model = (DefaultTreeModel) jTree.getModel();
			model.setRoot(new DefaultMutableTreeNode(""));

		}

		if (command.equals("Open")) {
			String str1, str2, str3, str4 = RGTConstants.EMPTY;

			// IdentifyController impobj = new IdentifyController();
			FileDialog dialog = new FileDialog(this, "Open");
			dialog.setVisible(true);
			str1 = dialog.getDirectory();
			str2 = dialog.getFile();

			IdentifyController ctrl = new IdentifyController();
			str4 = ctrl.readFile(str1, str2);
			jTextArea1.setText(str4);

		}
		if (command.equals("Exit")) {
			System.exit(0);
		}

		if (command.equals("Arial")) {
			int fontSize = f.getSize();
			int fontStyle = f.getStyle();
			f = new Font("Arial", fontStyle, fontSize);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}

		if (command.equals("Comic Sans MS")) {
			int fontSize = f.getSize();
			int fontStyle = f.getStyle();
			f = new Font("Comic Sans MS", fontStyle, fontSize);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("Times New Roman")) {
			int fontSize = f.getSize();
			int fontStyle = f.getStyle();
			f = new Font("Times New Roman", fontStyle, fontSize);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("Regular")) {
			String fontName = f.getName();
			int fontSize = f.getSize();
			f = new Font(fontName, Font.PLAIN, fontSize);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("Bold")) {
			String fontName = f.getName();
			int fontSize = f.getSize();
			f = new Font(fontName, Font.BOLD, fontSize);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("12")) {
			String fontName = f.getName();
			int fontStyle = f.getStyle();
			f = new Font(fontName, fontStyle, 12);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("14")) {
			String fontName = f.getName();
			int fontStyle = f.getStyle();
			f = new Font(fontName, fontStyle, 14);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("18")) {
			String fontName = f.getName();
			int fontStyle = f.getStyle();
			f = new Font(fontName, fontStyle, 18);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
		if (command.equals("20")) {
			String fontName = f.getName();
			int fontStyle = f.getStyle();
			f = new Font(fontName, fontStyle, 20);
			jTextArea1.setFont(f);
//			jTextArea2.setFont(f);
		}
	} // GEN-LAST:event_jMenuItem1ActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		RToolView rToolView = new RToolView();
		rToolView.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		rToolView.setSize(RGTConstants.OUTPUT_FRAME_WIDTH, RGTConstants.OUTPUT_FRAME_HEIGHT);
		rToolView.setTitle(RGTConstants.TITLE);
		Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
		rToolView.setLocation(dimension.width / 2 - rToolView.getSize().width / 2,
				dimension.height / 2 - rToolView.getSize().height / 2);
		rToolView.setVisible(true);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
        private javax.swing.JButton btnAutoHighlight;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenu jMenu6;
	private javax.swing.JMenu jMenu7;
	private javax.swing.JMenu jMenu8;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItem3;
	private javax.swing.JMenuItem jMenuItem4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTextArea jTextArea1;
//	private javax.swing.JTextArea jTextArea2;
	private javax.swing.JTree jTree;

//	public JTextArea getjTextArea2() {
//		return jTextArea2;
//	}
	public JTree getjTree(){
		return jTree;
	}

	private boolean verbFlag = false;
	private boolean verbNounFlag = false;
	private String verb;
	private String noun;
	private String vn;
	private boolean nounFlag = false;
	private JMenuItem fname1, fname2, fname3, fstyle1, fstyle2, fsize1, fsize2, fsize3, fsize4;
	private Font f;
	private String command;
	private JMenuItem deleteMenuItem;
	public String itmoutput;
	public String verbNoun;
	private JTextField txtNoun;
	private JTextField txtVerb;
}